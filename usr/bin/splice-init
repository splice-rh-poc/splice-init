#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2012 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public
# License as published by the Free Software Foundation; either version
# 2 of the License (GPLv2) or (at your option) any later version.
# There is NO WARRANTY for this software, express or implied,
# including the implied warranties of MERCHANTABILITY,
# NON-INFRINGEMENT, or FITNESS FOR A PARTICULAR PURPOSE. You should
# have received a copy of GPLv2 along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.


from ConfigParser import SafeConfigParser

import logging
import os
import sys
import urllib2
import urlparse
import traceback

from M2Crypto import X509


BASEURL = 'http://169.254.169.254/latest/'
LOG = logging.getLogger('splice-init')
LOGFILE = '/var/log/splice-init.log'
RHICDELIM = '|RHIC|'
RHSMCONF = '/etc/rhsm/rhsm.conf'


def query_metadata(url_path):
    url = urlparse.urljoin(BASEURL, url_path)

    try:
        fp = urllib2.urlopen(url)
    except urllib2.URLError, e:
        msg = 'Error getting EC2 instance metadata'
        handle_exception(e, msg)

    return fp.read()


def get_zone():
    zone = query_metadata('meta-data/placement/availability-zone')
    LOG.info('Zone [%s]' % zone)

    # Remove trailing character from the zone, we only care about the region
    # part, such as us-west-1 or us-west-2, not the actual zone.
    zone = zone[:-1]
    return zone


def get_user_data():
    user_data = query_metadata('user-data')
    LOG.info('User Data [%s]' % user_data)
    return user_data


def write_rhic(rhic):
    cp = SafeConfigParser()
    cp.read(RHSMCONF)
    rhic_path = cp.get('splice', 'rhic')
    rhic_dir = os.path.dirname(rhic_path)

    if not os.path.exists(rhic_dir):
        os.makedirs(rhic_dir)

    rhic_file = open(rhic_path, 'w')
    rhic_file.write(rhic)
    rhic_file.close()


def get_rhic():
    user_data = get_user_data()

    delim_split = user_data.split(RHICDELIM)

    # Fuzzy logic to try and determine if a RHIC is in the user data.
    if len(delim_split) == 1:
        # Assume the whole user data is the rhic
        rhic = user_data
    elif len(delim_split) == 2:
        # Assume the rhic is everything after the delim in the user data
        start = user_data.index(RHICDELIM) + 1
        rhic = user_data[start:]
    elif len(delim_split) == 3:
        # Assume the rhic is between the 2 delimeters in the user data
        start = user_data.index(RHICDELIM) + 1
        end = user_data.rindex(RHICDELIM)
        rhic = user_data[start:end]
    else:
        LOG.error("Couldn't read rhic from user data.")
        sys.exit(1)

    # Simple string check to make sure the rhic we got appears correct
    if 'BEGIN CERTIFICATE' not in rhic or \
       'END CERTIFICATE' not in rhic:
        msg = 'Couldn''t read rhic from user data.'
        raise Exception(msg)
        
    # Finally, parse it with m2crypto as a final verification.
    try:
        cert = X509.load_cert_string(rhic)
    except X509.X509Error, e:
        msg = 'Couldn''t read rhic from user data.'
        handle_exception(e, msg)

    LOG.info('Read rhic %s' % cert.get_subject().as_text())

    return rhic


def configure_logging():
    formatter = logging.Formatter("[%(levelname)s:%(name)s] %(module)s:%(lineno)d %(asctime)s: %(message)s")

    file_handler = logging.FileHandler(LOGFILE)
    file_handler.setFormatter(formatter)

    LOG.addHandler(file_handler)
    LOG.setLevel(logging.INFO)


def handle_exception(e, msg):
    ei = sys.exc_info()
    tb = traceback.format_tb(ei[2])
    LOG.error(msg)
    LOG.error(e)
    if e.message:
        LOG.error(e.message)
    LOG.error('\n'.join(tb))
    sys.exit(1)
    

def main():
    rhic = get_rhic()
    write_rhic(rhic)


if __name__ == '__main__':

    configure_logging()

    try:
        main()
    except Exception, e:
        msg = 'Exception occurred during splice-init run.'
        print >> sys.stderr, msg
        print >> sys.stderr, 'Check the log file at %s for more info.' % LOGFILE
        handle_exception(e, msg)
